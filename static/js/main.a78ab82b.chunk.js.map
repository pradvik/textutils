{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","console","log","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","lenght","defaultPorps","aboutText","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.a78ab82b.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom/cjs/react-router-dom.min'\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n  <nav className={ `navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n\r\n        </li>\r\n        {/* <li className=\"nav-item\">\r\n          <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n        </li> */}\r\n      </ul>\r\n      <form className=\"d-flex\">\r\n        {/* <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className =\"btn btn-outline-primary\" type=\"submit\">Search</button> */}\r\n        <div className={`form-check form-switch  text-${props.mode==='light'?'dark':'light'}`}>\r\n  <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefauslt\">Enable dark  mode</label>\r\n</div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</nav>\r\n         \r\n    )\r\n}\r\n\r\n\r\nNavbar.propTypes ={\r\n   title: PropTypes.string,\r\n   aboutText: PropTypes.string\r\n}\r\n\r\nNavbar.defaultPorps={\r\n    title:'set title here',\r\n    aboutText: 'About text here'\r\n}\r\n\r\n","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n   const handleUpClick = ()=>{\r\n       console.log(\"Uppercase was clicked\");\r\n       let newText = text.toUpperCase();\r\n       setText(newText)\r\n       props.showAlert(\"converted to uppercase!\" ,\"success\")\r\n       \r\n   } \r\n\r\n   const handleLoClick = ()=>{\r\n    console.log(\"Lowercase was clicked\");\r\n    let newText = text.toLowerCase();\r\n    setText(newText)\r\n    props.showAlert(\"Converted to Lowercase!\",\"success\")\r\n   }\r\n\r\n   const handleClearClick = ()=>{\r\n    console.log(\"Clearing the text\");\r\n    let newText = \"\";\r\n    setText(newText)\r\n    props.showAlert(\"Text cleared!\", \"success\")\r\n\r\n\r\n   }\r\n\r\n   const handleOnChange= (event)=>{\r\n    console.log(\"On change\");\r\n    setText(event.target.value)\r\n   \r\n} \r\n\r\nconst handleCopy = () => {\r\n    var text = document.getElementById(\"myBox\");\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n     props.showAlert(\"copied the text to clipboard\" , \"success\")\r\n       \r\n}  \r\n\r\nconst handleExtraSpace = () =>{\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"))\r\n    props.showAlert(\" Extra Spaces Removed!\", \"success\")\r\n\r\n}\r\n\r\n\r\n\r\n   const [text , setText] = useState('');\r\n    return (\r\n<>\r\n    <div className=\"container\" style={{color : props.mode==='dark'?'white':'#042743'}} >\r\n        <h1>{props.heading}</h1>\r\n        <div className='mb-3'>\r\n            <textarea className=\"form-control\" value= {text} onChange={handleOnChange} style={{backgroundColor : props.mode==='dark'?'grey':'white',color : props.mode==='dark'?'white':'#042743'}} id=\"myBox\" rows=\"7\"></textarea>\r\n        \r\n        </div>\r\n        <button className='btn btn-primary mx-1' onClick= {handleUpClick}>Convert to Uppercase</button>\r\n\r\n        \r\n        <button className='btn btn-primary mx-1' onClick= {handleLoClick}>Convert to Lowercase</button>\r\n\r\n\r\n        <button className='btn btn-primary mx-1' onClick= {handleClearClick}>Clear Text</button>\r\n\r\n        <button className='btn btn-primary mx-1' onClick= {handleCopy}>Copy Text</button>\r\n\r\n        <button className='btn btn-primary mx-1' onClick= {handleExtraSpace}>Remove ExtraSpace</button>\r\n\r\n\r\n        <div className=\"container  my-3\" >\r\n            <h2>Your Text Summary</h2>\r\n            <p>{text.split(\" \").length}words and {text.length} characters</p>\r\n            <p>{0.008 * text.split(\" \").length}     Minutes read</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.lenght>0?text:\"Enter something to preview it here\"}</p>\r\n        </div>\r\n    </div>\r\n    </>\r\n    )\r\n}","import React from 'react'\r\n\r\nfunction Alert(props) {\r\nconst capitalize = (word) =>{\r\nconst lower = word.toLowerCase();\r\nreturn lower.charAt(0).toUpperCase() + lower.slice(1);\r\n}\r\n\r\n    return (\r\n      props.alert &&  <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}  \r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","/*import logo from './logo.svg';*/\nimport './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\n// import {BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\n\n\nfunction App() {\n\n  const [mode, setMode] = useState(\"light\")// whether dark mode is enabled or not \n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type)=>{\n    setAlert({\n      msg: message,\n      type: type\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n    \n  \n  \nconst toggleMode = () =>{\n if(mode === \"light\") {\n   setMode (\"dark\");\n   document.body.style.backgroundColor = '#042743';\n   showAlert(\"Dark mode has been enabled\",  \"success\")\n   ;\n   document.title = 'TextUtils - Dark Mode'\n }\n else{\n   setMode (\"light\");\n   document.body.style.backgroundColor = 'white';\n   showAlert(\"Light mode has been enabled\", \"success\")\n   document.title = 'Textutils - Light Mode'\n  }\n}\n  return(\n     <>\n{/* <Router>    */}\n<Navbar  title=\"TextUtils\" aboutText=\"About TextUtils\"  mode = {mode} toggleMode={toggleMode} />\n<Alert alert={alert}/>\n< div className=\"container my-3\">\n  {/* <Switch> */}\n        {/* <Route exact path=\"/about\"> */}\n            {/* <About /> */}\n        {/* </Route>    */}\n        {/* <Route exact path=\"/\"> */}\n          <TextForm showAlert={showAlert} heading=\"Enter the text to analyze\" mode={mode}/> \n        {/* </Route> */}\n  {/* </Switch> */}\n</div>\n{/* </Router> */}\n  </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}